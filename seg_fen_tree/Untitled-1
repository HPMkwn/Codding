#include<bits/stdc++.h>
using namespace std;


void build_tree(vector<int> &tree,vector<vector<int>> freq,vector<int> arr,int start,int end,int in){
	if(start==end){
		tree[in]= arr[start];
		return;
	}
	int mid = (start+end)>>1;
	build_tree(tree,freq,arr,start,mid,2*in);
	build_tree(tree,freq,arr,mid+1,end,2*in + 1);

	tree[in] = max((freq[tree[2*in]][end]-freq[tree[2*in]][start-1]),(freq[tree[2*in + 1]][end]-freq[tree[2*in + 1]][start-1]));
}

int query(vector<int>tree,vector<vector<int>> freq,vector<int> arr,int start ,int end,int l,int r,int in){
	if(l>end || r<start)return 0;

	if(start>=l &&end<=r)return tree[in];
	int mid = (start+end)>>1;
	
	int left = query(tree,freq,arr,start,mid,l,r,2*in);
	int right = query(tree,freq,arr,mid+1,end,l,r,2*in+1);
	return max((freq[left][end]-freq[left][l-1]),(freq[right][end]-freq[right][l-1]));
}

int main(){
	int n,k,q;
	cin>>n>>k>>q;

	vector<int> arr(n,0);
	set<int,greater<int>> s;
	for(int i=0;i<n;i++){cin>>arr[i];s.insert(arr[i]);}

	vector<vector<int>> freq(100,vector<int>(n+1,0));

	for(int i=0;i<n;i++){
		freq[arr[i]][i+1] = 1;
	}

	for(int i=0;i<100;i++){
		for(int j=0;j<=n;j++){
			if(freq[i][j]!=0){
				freq[i][j] = freq[i][j-1] + 1;
			}
		}
	}

	int h = (int)ceil(log2(n));

	int siz = 2*pow(2,h);
	vector<int> tree(siz,0);
	build_tree(tree,freq,arr,0,arr.size()-1,0);
	while(q--){
		int l,r;
		cin>>l>>r;
		cout<<query(tree,freq,arr,0,arr.size()-1,0,l-1,r-1)<<"\n";
	}
}