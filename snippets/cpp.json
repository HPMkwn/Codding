{
	"header snippet": {
		"prefix": "!",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define ll long long",
			"#define F(a, b, i) for (int i = a; i < b; i++)",
			"#define f(a, b, i) for (int i = a; i >= b; i--)",
			"#define m 1000000007",
			"",
			"int main(){",
			"",
			"    return 0;",
			"}"
		],
		"description": "header snippet"
	},
	"graph": {
		"prefix": "graph",
		"body": [
			"int n,e,x,y;",
			"cin>>n>>e;",
			"vector<vector<int>> graph(n);",
			"F(0,e,i){",
			"    cin>>x>>y;",
			"    graph[x-1].push_back(y-1);",
			"    graph[y-1].push_back(x-1);",
			"}",
			"vector<bool> visited(n,false);"
		],
		"description": "graph"
	},
	"wgraph": {
		"prefix": "wgraph",
		"body": [
		  "int n, e, x, y, w;",
		  "cin >> n >> e;",
		  "vector<vector<pair<int, int>>> graph(n);",
		  "F(0, e, i){",
		  "   cin >> x >> y >> w;",
		  "   graph[x - 1].push_back({y - 1, w});",
		  "   graph[y - 1].push_back({x - 1, w});",
		  "}",
		  "vector<bool> visited(n, false);"
		],
		"description": "wgraph"
	  },
	"dfs": {
		"prefix": "dfs",
		"body": [
			"void dfs(vector<vector<int>>& graph,int sv,vector<bool>& visited){",
			"    visited[sv] = true;",
			"    cout<<sv<<\" \";",
			"    for(int cv : graph[sv]){",
			"        if(!visited[cv])",
			"            dfs(graph,cv,visited);",
			"    }",
			"}"
		],
		"description": "dfs"
	},

	"bfs": {
		"prefix": "bfs",
		"body": [
		  "void bfs(vector<vector<int>> &graph, int sv, vector<bool>visited)",
		  "{",
		  "    queue<int> q;",
		  "    q.push(sv);",
		  "    visited[sv] = true;",
		  "",
		  "    while (!q.empty()){",
		  "        sv = q.front();",
		  "        cout << sv << \" \";",
		  "        q.pop();",
		  "        for (int cv : graph[sv]){",
		  "            if (!visited[cv]){",
		  "                visited[cv] = true;",
		  "                q.push(cv);",
		  "            }",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "bfs"
	},
	"vector-print": {
		"prefix": "vp",
		"body": [
		  "template<typename T>",
		  "void vp(T a){",
		  "    for(int i=0;i<a.size();i++){",
		  "        cout<<a[i]<<\" \";",
		  "    }",
		  "    cout<<\"\\n\";",
		  "}"
		],
		"description": "print vector only"
	},
	"dijstra": {
		"prefix": "dijstra",
		"body": [
		  "int dijkstra(vector<vector<pair<int, int>>> &graph, vector<bool> visited, int sv, int ev)",
		  "{",
		  "    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;",
		  "    vector<int> dist(graph.size(), INT_MAX);",
		  "    vector<int> p(graph.size(),-1);",
		  "    dist[sv] = 0;",
		  "    p[sv]=sv;",
		  "    q.push({0, sv});",
		  "    pair<int, int> ele;",
		  "    while (!q.empty())",
		  "    {",
		  "        ele = q.top();",
		  "        q.pop();",
		  "        for (auto cv : graph[ele.second])",
		  "        {",
		  "            if (dist[ele.second] + cv.second < dist[cv.first])",
		  "            {",
		  "                dist[cv.first] = dist[ele.second] + cv.second;",
		  "                q.push({dist[cv.first], cv.first});",
		  "                p[cv.first] = ele.second;",
		  "            }",
		  "        }",
		  "    }",
		  "    vector<int> path = restore_path(p,sv,ev);",
		  "    vp(path);",
		  "    return dist[ev];",
		  "}"
		],
		"description": "dijstra"
	  },
	  "restore_path": {
		"prefix": "restore_path",
		"body": [
		  "vector<int> restore_path(vector<int>& p,int sv,int ev){",
		  "",
		  "    vector<int> path;",
		  "    for (int i = ev; i != sv; i = p[i]) ",
		  "    {",
		  "        path.push_back(i);",
		  "    }",
		  "    path.push_back(sv);",
		  "    reverse(path.begin(),path.end());",
		  "    return path;",
		  "    ",
		  "}"
		],
		"description": "restore_path"
	  }
}
// in file 'Code/User/snippets/javascript.json'
